{"ast":null,"code":"import _regeneratorRuntime from \"/home/shivansh/Desktop/ecell/ecell projects/NEC/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/regenerator\";\nimport _inherits from \"/home/shivansh/Desktop/ecell/ecell projects/NEC/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/shivansh/Desktop/ecell/ecell projects/NEC/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/home/shivansh/Desktop/ecell/ecell projects/NEC/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shivansh/Desktop/ecell/ecell projects/NEC/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Injectable, Inject, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { ReplaySubject, AsyncSubject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { __awaiter } from 'tslib';\nimport * as Éµngcc0 from '@angular/core';\n\nvar BaseLoginProvider = /*#__PURE__*/function () {\n  function BaseLoginProvider() {\n    _classCallCheck(this, BaseLoginProvider);\n  }\n\n  _createClass(BaseLoginProvider, [{\n    key: \"loadScript\",\n    value: function loadScript(id, src, onload) {\n      var parentElement = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n      // get document if platform is only browser\n      if (typeof document !== 'undefined' && !document.getElementById(id)) {\n        var signInJS = document.createElement('script');\n        signInJS.async = true;\n        signInJS.src = src;\n        signInJS.onload = onload;\n\n        if (!parentElement) {\n          parentElement = document.head;\n        }\n\n        parentElement.appendChild(signInJS);\n      }\n    }\n  }]);\n\n  return BaseLoginProvider;\n}();\n\nvar SocialUser = function SocialUser() {\n  _classCallCheck(this, SocialUser);\n};\n\nvar GoogleLoginProvider = /*#__PURE__*/function (_BaseLoginProvider) {\n  _inherits(GoogleLoginProvider, _BaseLoginProvider);\n\n  var _super = _createSuper(GoogleLoginProvider);\n\n  function GoogleLoginProvider(clientId) {\n    var _this;\n\n    var initOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      scope: 'email'\n    };\n\n    _classCallCheck(this, GoogleLoginProvider);\n\n    _this = _super.call(this);\n    _this.clientId = clientId;\n    _this.initOptions = initOptions;\n    return _this;\n  }\n\n  _createClass(GoogleLoginProvider, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        try {\n          _this2.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://apis.google.com/js/platform.js', function () {\n            gapi.load('auth2', function () {\n              _this2.auth2 = gapi.auth2.init(Object.assign(Object.assign({}, _this2.initOptions), {\n                client_id: _this2.clientId\n              }));\n\n              _this2.auth2.then(function () {\n                resolve();\n              }).catch(function (err) {\n                reject(err);\n              });\n            });\n          });\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n  }, {\n    key: \"getLoginStatus\",\n    value: function getLoginStatus(loginStatusOptions) {\n      var _this3 = this;\n\n      var options = Object.assign(Object.assign({}, this.initOptions), loginStatusOptions);\n      return new Promise(function (resolve, reject) {\n        if (_this3.auth2.isSignedIn.get()) {\n          var user = new SocialUser();\n\n          var profile = _this3.auth2.currentUser.get().getBasicProfile();\n\n          var authResponse = _this3.auth2.currentUser.get().getAuthResponse(true); // get complete authResponse object\n\n\n          user.id = profile.getId();\n          user.name = profile.getName();\n          user.email = profile.getEmail();\n          user.photoUrl = profile.getImageUrl();\n          user.firstName = profile.getGivenName();\n          user.lastName = profile.getFamilyName();\n          user.response = authResponse;\n\n          var resolveUser = function resolveUser(authResponse) {\n            user.authToken = authResponse.access_token;\n            user.idToken = authResponse.id_token;\n            resolve(user);\n          };\n\n          if (options.refreshToken) {\n            _this3.auth2.currentUser.get().reloadAuthResponse().then(resolveUser);\n          } else {\n            var _authResponse = _this3.auth2.currentUser.get().getAuthResponse(true);\n\n            resolveUser(_authResponse);\n          }\n        } else {\n          reject(\"No user is currently logged in with \".concat(GoogleLoginProvider.PROVIDER_ID));\n        }\n      });\n    }\n  }, {\n    key: \"signIn\",\n    value: function signIn(signInOptions) {\n      var _this4 = this;\n\n      var options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n      return new Promise(function (resolve, reject) {\n        var offlineAccess = options && options.offline_access;\n        var promise = !offlineAccess ? _this4.auth2.signIn(signInOptions) : _this4.auth2.grantOfflineAccess(signInOptions);\n        promise.then(function (response) {\n          var user = new SocialUser();\n\n          if (response && response.code) {\n            user.authorizationCode = response.code;\n          } else {\n            var profile = _this4.auth2.currentUser.get().getBasicProfile();\n\n            var authResponse = _this4.auth2.currentUser.get().getAuthResponse(true);\n\n            var token = authResponse.access_token;\n            var backendToken = authResponse.id_token;\n            user.id = profile.getId();\n            user.name = profile.getName();\n            user.email = profile.getEmail();\n            user.photoUrl = profile.getImageUrl();\n            user.firstName = profile.getGivenName();\n            user.lastName = profile.getFamilyName();\n            user.authToken = token;\n            user.idToken = backendToken;\n            user.response = authResponse;\n          }\n\n          resolve(user);\n        }, function (closed) {\n          reject(closed);\n        }).catch(function (err) {\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"signOut\",\n    value: function signOut(revoke) {\n      var _this5 = this;\n\n      return new Promise(function (resolve, reject) {\n        var signOutPromise;\n\n        if (revoke) {\n          signOutPromise = _this5.auth2.disconnect();\n        } else {\n          signOutPromise = _this5.auth2.signOut();\n        }\n\n        signOutPromise.then(function (err) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        }).catch(function (err) {\n          reject(err);\n        });\n      });\n    }\n  }]);\n\n  return GoogleLoginProvider;\n}(BaseLoginProvider);\n\nGoogleLoginProvider.PROVIDER_ID = 'GOOGLE';\n/**\n * The service encapsulating the social login functionality. Exposes methods like\n * `signIn`, `signOut`. Also, exposes an `authState` `Observable` that one can\n * subscribe to get the current logged in user information.\n *\n * @dynamic\n */\n\nvar SocialAuthService = /*#__PURE__*/function () {\n  /**\n   * @param config A `SocialAuthServiceConfig` object or a `Promise` that resolves to a `SocialAuthServiceConfig` object\n   */\n  function SocialAuthService(config) {\n    var _this6 = this;\n\n    _classCallCheck(this, SocialAuthService);\n\n    this.providers = new Map();\n    this.autoLogin = false;\n    this._user = null;\n    this._authState = new ReplaySubject(1);\n    /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */\n\n    this.initialized = false;\n    this._initState = new AsyncSubject();\n\n    if (config instanceof Promise) {\n      config.then(function (config) {\n        _this6.initialize(config);\n      });\n    } else {\n      this.initialize(config);\n    }\n  }\n  /** An `Observable` that one can subscribe to get the current logged in user information */\n\n\n  _createClass(SocialAuthService, [{\n    key: \"authState\",\n    get: function get() {\n      return this._authState.asObservable();\n    }\n    /** An `Observable` to communicate the readiness of the service and associated login providers */\n\n  }, {\n    key: \"initState\",\n    get: function get() {\n      return this._initState.asObservable();\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize(config) {\n      var _this7 = this;\n\n      this.autoLogin = config.autoLogin !== undefined ? config.autoLogin : false;\n      var _config$onError = config.onError,\n          onError = _config$onError === void 0 ? console.error : _config$onError;\n      config.providers.forEach(function (item) {\n        _this7.providers.set(item.id, item.provider);\n      });\n      Promise.all(Array.from(this.providers.values()).map(function (provider) {\n        return provider.initialize();\n      })).then(function () {\n        if (_this7.autoLogin) {\n          var loginStatusPromises = [];\n          var loggedIn = false;\n\n          _this7.providers.forEach(function (provider, key) {\n            var promise = provider.getLoginStatus();\n            loginStatusPromises.push(promise);\n            promise.then(function (user) {\n              user.provider = key;\n              _this7._user = user;\n\n              _this7._authState.next(user);\n\n              loggedIn = true;\n            }).catch(console.debug);\n          });\n\n          Promise.all(loginStatusPromises).catch(function () {\n            if (!loggedIn) {\n              _this7._user = null;\n\n              _this7._authState.next(null);\n            }\n          });\n        }\n      }).catch(function (error) {\n        onError(error);\n      }).finally(function () {\n        _this7.initialized = true;\n\n        _this7._initState.next(_this7.initialized);\n\n        _this7._initState.complete();\n      });\n    }\n  }, {\n    key: \"refreshAuthToken\",\n    value: function refreshAuthToken(providerId) {\n      var _this8 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this8.initialized) {\n          reject(SocialAuthService.ERR_NOT_INITIALIZED);\n        } else if (providerId !== GoogleLoginProvider.PROVIDER_ID) {\n          reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n        } else {\n          var providerObject = _this8.providers.get(providerId);\n\n          if (providerObject) {\n            providerObject.getLoginStatus({\n              refreshToken: true\n            }).then(function (user) {\n              user.provider = providerId;\n              _this8._user = user;\n\n              _this8._authState.next(user);\n\n              resolve();\n            }).catch(function (err) {\n              reject(err);\n            });\n          } else {\n            reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n          }\n        }\n      });\n    }\n    /**\n     * A method used to sign in a user with a specific `LoginProvider`.\n     *\n     * @param providerId Id with which the `LoginProvider` has been registered with the service\n     * @param signInOptions Optional `LoginProvider` specific arguments\n     * @returns A `Promise` that resolves to the authenticated user information\n     */\n\n  }, {\n    key: \"signIn\",\n    value: function signIn(providerId, signInOptions) {\n      var _this9 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this9.initialized) {\n          reject(SocialAuthService.ERR_NOT_INITIALIZED);\n        } else {\n          var providerObject = _this9.providers.get(providerId);\n\n          if (providerObject) {\n            providerObject.signIn(signInOptions).then(function (user) {\n              user.provider = providerId;\n              resolve(user);\n              _this9._user = user;\n\n              _this9._authState.next(user);\n            }).catch(function (err) {\n              reject(err);\n            });\n          } else {\n            reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n          }\n        }\n      });\n    }\n    /**\n     * A method used to sign out the currently loggen in user.\n     *\n     * @param revoke Optional parameter to specify whether a hard sign out is to be performed\n     * @returns A `Promise` that resolves if the operation is successful, rejects otherwise\n     */\n\n  }, {\n    key: \"signOut\",\n    value: function signOut() {\n      var _this10 = this;\n\n      var revoke = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return new Promise(function (resolve, reject) {\n        if (!_this10.initialized) {\n          reject(SocialAuthService.ERR_NOT_INITIALIZED);\n        } else if (!_this10._user) {\n          reject(SocialAuthService.ERR_NOT_LOGGED_IN);\n        } else {\n          var providerId = _this10._user.provider;\n\n          var providerObject = _this10.providers.get(providerId);\n\n          if (providerObject) {\n            providerObject.signOut(revoke).then(function () {\n              resolve();\n              _this10._user = null;\n\n              _this10._authState.next(null);\n            }).catch(function (err) {\n              reject(err);\n            });\n          } else {\n            reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n          }\n        }\n      });\n    }\n  }]);\n\n  return SocialAuthService;\n}();\n\nSocialAuthService.Éµfac = function SocialAuthService_Factory(t) {\n  return new (t || SocialAuthService)(Éµngcc0.ÉµÉµinject('SocialAuthServiceConfig'));\n};\n\nSocialAuthService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({\n  token: SocialAuthService,\n  factory: SocialAuthService.Éµfac\n});\nSocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';\nSocialAuthService.ERR_NOT_LOGGED_IN = 'Not logged in';\nSocialAuthService.ERR_NOT_INITIALIZED = 'Login providers not ready yet. Are there errors on your console?';\nSocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN = 'Chosen login provider is not supported for refreshing a token';\n\nSocialAuthService.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: ['SocialAuthServiceConfig']\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(SocialAuthService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: ['SocialAuthServiceConfig']\n      }]\n    }];\n  }, null);\n})();\n/**\n * The main module of angularx-social-login library.\n */\n\n\nvar SocialLoginModule = /*#__PURE__*/function () {\n  function SocialLoginModule(parentModule) {\n    _classCallCheck(this, SocialLoginModule);\n\n    if (parentModule) {\n      throw new Error('SocialLoginModule is already loaded. Import it in the AppModule only');\n    }\n  }\n\n  _createClass(SocialLoginModule, null, [{\n    key: \"initialize\",\n    value: function initialize(config) {\n      return {\n        ngModule: SocialLoginModule,\n        providers: [SocialAuthService, {\n          provide: 'SocialAuthServiceConfig',\n          useValue: config\n        }]\n      };\n    }\n  }]);\n\n  return SocialLoginModule;\n}();\n\nSocialLoginModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({\n  type: SocialLoginModule\n});\nSocialLoginModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({\n  factory: function SocialLoginModule_Factory(t) {\n    return new (t || SocialLoginModule)(Éµngcc0.ÉµÉµinject(SocialLoginModule, 12));\n  },\n  providers: [SocialAuthService],\n  imports: [[CommonModule]]\n});\n\nSocialLoginModule.ctorParameters = function () {\n  return [{\n    type: SocialLoginModule,\n    decorators: [{\n      type: Optional\n    }, {\n      type: SkipSelf\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(SocialLoginModule, {\n    imports: function imports() {\n      return [CommonModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(SocialLoginModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      providers: [SocialAuthService]\n    }]\n  }], function () {\n    return [{\n      type: SocialLoginModule,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }];\n  }, null);\n})(); // Simulates login / logout without actually requiring an Internet connection.\n//\n// Useful for certain development situations.\n//\n// For example, if you want to simulate the greatest football referee England has ever produced:\n//\n//  const dummyUser: SocialUser = {\n//     id: '0123456789',\n//     name: 'Howard Webb',\n//     email: 'howard@webb.com',\n//     firstName: 'Howard',\n//     lastName: 'Webb',\n//     authToken: 'dummyAuthToken',\n//     photoUrl: 'https://en.wikipedia.org/wiki/Howard_Webb#/media/File:Howard_Webb_march11.jpg',\n//     provider: 'DUMMY',\n//     idToken: 'dummyIdToken',\n//     authorizationCode: 'dummyAuthCode'\n// };\n//\n//  let config = new AuthServiceConfig([\n//  { ... },\n//  {\n//       id: DummyLoginProvider.PROVIDER_ID,\n//       provider: new DummyLoginProvider(dummyUser)  // Pass your user into the constructor\n//   },\n//  { ... }\n//  ]);\n\n\nvar DummyLoginProvider = /*#__PURE__*/function (_BaseLoginProvider2) {\n  _inherits(DummyLoginProvider, _BaseLoginProvider2);\n\n  var _super2 = _createSuper(DummyLoginProvider);\n\n  function DummyLoginProvider(dummy) {\n    var _this11;\n\n    _classCallCheck(this, DummyLoginProvider);\n\n    _this11 = _super2.call(this);\n\n    if (dummy) {\n      _this11.dummy = dummy;\n    } else {\n      _this11.dummy = DummyLoginProvider.DEFAULT_USER;\n    } // Start not logged in\n\n\n    _this11.loggedIn = false;\n    return _this11;\n  }\n\n  _createClass(DummyLoginProvider, [{\n    key: \"getLoginStatus\",\n    value: function getLoginStatus() {\n      var _this12 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (_this12.loggedIn) {\n          resolve(_this12.dummy);\n        } else {\n          reject('No user is currently logged in.');\n        }\n      });\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      return new Promise(function (resolve, reject) {\n        resolve();\n      });\n    }\n  }, {\n    key: \"signIn\",\n    value: function signIn() {\n      var _this13 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this13.loggedIn = true;\n        resolve(_this13.dummy);\n      });\n    }\n  }, {\n    key: \"signOut\",\n    value: function signOut(revoke) {\n      var _this14 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this14.loggedIn = false;\n        resolve();\n      });\n    }\n  }]);\n\n  return DummyLoginProvider;\n}(BaseLoginProvider);\n\nDummyLoginProvider.PROVIDER_ID = 'DUMMY';\nDummyLoginProvider.DEFAULT_USER = {\n  id: '1234567890',\n  name: 'Mickey Mouse',\n  email: 'mickey@mouse.com',\n  firstName: 'Mickey',\n  lastName: 'Mouse',\n  authToken: 'dummyAuthToken',\n  photoUrl: 'https://en.wikipedia.org/wiki/File:Mickey_Mouse.png',\n  provider: 'DUMMY',\n  idToken: 'dummyIdToken',\n  authorizationCode: 'dummyAuthCode',\n  response: {}\n};\n\nvar FacebookLoginProvider = /*#__PURE__*/function (_BaseLoginProvider3) {\n  _inherits(FacebookLoginProvider, _BaseLoginProvider3);\n\n  var _super3 = _createSuper(FacebookLoginProvider);\n\n  function FacebookLoginProvider(clientId) {\n    var _this15;\n\n    var initOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      scope: 'email,public_profile',\n      locale: 'en_US',\n      fields: 'name,email,picture,first_name,last_name',\n      version: 'v4.0'\n    };\n\n    _classCallCheck(this, FacebookLoginProvider);\n\n    _this15 = _super3.call(this);\n    _this15.clientId = clientId;\n    _this15.initOptions = initOptions;\n    return _this15;\n  }\n\n  _createClass(FacebookLoginProvider, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var _this16 = this;\n\n      return new Promise(function (resolve, reject) {\n        try {\n          _this16.loadScript(FacebookLoginProvider.PROVIDER_ID, \"//connect.facebook.net/\".concat(_this16.initOptions.locale, \"/sdk.js\"), function () {\n            FB.init({\n              appId: _this16.clientId,\n              autoLogAppEvents: true,\n              cookie: true,\n              xfbml: true,\n              version: _this16.initOptions.version\n            });\n            resolve();\n          });\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n  }, {\n    key: \"getLoginStatus\",\n    value: function getLoginStatus() {\n      var _this17 = this;\n\n      return new Promise(function (resolve, reject) {\n        FB.getLoginStatus(function (response) {\n          if (response.status === 'connected') {\n            var authResponse = response.authResponse;\n            FB.api(\"/me?fields=\".concat(_this17.initOptions.fields), function (fbUser) {\n              var user = new SocialUser();\n              user.id = fbUser.id;\n              user.name = fbUser.name;\n              user.email = fbUser.email;\n              user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal';\n              user.firstName = fbUser.first_name;\n              user.lastName = fbUser.last_name;\n              user.authToken = authResponse.accessToken;\n              user.response = fbUser;\n              resolve(user);\n            });\n          } else {\n            reject(\"No user is currently logged in with \".concat(FacebookLoginProvider.PROVIDER_ID));\n          }\n        });\n      });\n    }\n  }, {\n    key: \"signIn\",\n    value: function signIn(signInOptions) {\n      var options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n      return new Promise(function (resolve, reject) {\n        FB.login(function (response) {\n          if (response.authResponse) {\n            var authResponse = response.authResponse;\n            FB.api(\"/me?fields=\".concat(options.fields), function (fbUser) {\n              var user = new SocialUser();\n              user.id = fbUser.id;\n              user.name = fbUser.name;\n              user.email = fbUser.email;\n              user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal';\n              user.firstName = fbUser.first_name;\n              user.lastName = fbUser.last_name;\n              user.authToken = authResponse.accessToken;\n              user.response = fbUser;\n              resolve(user);\n            });\n          } else {\n            reject('User cancelled login or did not fully authorize.');\n          }\n        }, options);\n      });\n    }\n  }, {\n    key: \"signOut\",\n    value: function signOut() {\n      return new Promise(function (resolve, reject) {\n        FB.logout(function (response) {\n          resolve();\n        });\n      });\n    }\n  }]);\n\n  return FacebookLoginProvider;\n}(BaseLoginProvider);\n\nFacebookLoginProvider.PROVIDER_ID = 'FACEBOOK';\n\nvar AmazonLoginProvider = /*#__PURE__*/function (_BaseLoginProvider4) {\n  _inherits(AmazonLoginProvider, _BaseLoginProvider4);\n\n  var _super4 = _createSuper(AmazonLoginProvider);\n\n  function AmazonLoginProvider(clientId) {\n    var _this18;\n\n    var initOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      scope: 'profile',\n      scope_data: {\n        profile: {\n          essential: false\n        }\n      },\n      redirect_uri: location.origin\n    };\n\n    _classCallCheck(this, AmazonLoginProvider);\n\n    _this18 = _super4.call(this);\n    _this18.clientId = clientId;\n    _this18.initOptions = initOptions;\n    return _this18;\n  }\n\n  _createClass(AmazonLoginProvider, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var _this19 = this;\n\n      var amazonRoot = null;\n\n      if (document) {\n        amazonRoot = document.createElement('div');\n        amazonRoot.id = 'amazon-root';\n        document.body.appendChild(amazonRoot);\n      }\n\n      window.onAmazonLoginReady = function () {\n        amazon.Login.setClientId(_this19.clientId);\n      };\n\n      return new Promise(function (resolve, reject) {\n        try {\n          _this19.loadScript('amazon-login-sdk', 'https://assets.loginwithamazon.com/sdk/na/login1.js', function () {\n            resolve();\n          }, amazonRoot);\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n  }, {\n    key: \"getLoginStatus\",\n    value: function getLoginStatus() {\n      var _this20 = this;\n\n      return new Promise(function (resolve, reject) {\n        var token = _this20.retrieveToken();\n\n        if (token) {\n          amazon.Login.retrieveProfile(token, function (response) {\n            if (response.success) {\n              var user = new SocialUser();\n              user.id = response.profile.CustomerId;\n              user.name = response.profile.Name;\n              user.email = response.profile.PrimaryEmail;\n              user.response = response.profile;\n              resolve(user);\n            } else {\n              reject(response.error);\n            }\n          });\n        } else {\n          reject(\"No user is currently logged in with \".concat(AmazonLoginProvider.PROVIDER_ID));\n        }\n      });\n    }\n  }, {\n    key: \"signIn\",\n    value: function signIn(signInOptions) {\n      var _this21 = this;\n\n      var options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n      return new Promise(function (resolve, reject) {\n        amazon.Login.authorize(options, function (authResponse) {\n          if (authResponse.error) {\n            reject(authResponse.error);\n          } else {\n            amazon.Login.retrieveProfile(authResponse.access_token, function (response) {\n              var user = new SocialUser();\n              user.id = response.profile.CustomerId;\n              user.name = response.profile.Name;\n              user.email = response.profile.PrimaryEmail;\n              user.authToken = authResponse.access_token;\n              user.response = response.profile;\n\n              _this21.persistToken(authResponse.access_token);\n\n              resolve(user);\n            });\n          }\n        });\n      });\n    }\n  }, {\n    key: \"signOut\",\n    value: function signOut() {\n      var _this22 = this;\n\n      return new Promise(function (resolve, reject) {\n        try {\n          amazon.Login.logout();\n\n          _this22.clearToken();\n\n          resolve();\n        } catch (err) {\n          reject(err.message);\n        }\n      });\n    }\n  }, {\n    key: \"persistToken\",\n    value: function persistToken(token) {\n      localStorage.setItem(\"\".concat(AmazonLoginProvider.PROVIDER_ID, \"_token\"), token);\n    }\n  }, {\n    key: \"retrieveToken\",\n    value: function retrieveToken() {\n      return localStorage.getItem(\"\".concat(AmazonLoginProvider.PROVIDER_ID, \"_token\"));\n    }\n  }, {\n    key: \"clearToken\",\n    value: function clearToken() {\n      localStorage.removeItem(\"\".concat(AmazonLoginProvider.PROVIDER_ID, \"_token\"));\n    }\n  }]);\n\n  return AmazonLoginProvider;\n}(BaseLoginProvider);\n\nAmazonLoginProvider.PROVIDER_ID = 'AMAZON';\n\nvar VKLoginProvider = /*#__PURE__*/function (_BaseLoginProvider5) {\n  _inherits(VKLoginProvider, _BaseLoginProvider5);\n\n  var _super5 = _createSuper(VKLoginProvider);\n\n  function VKLoginProvider(clientId) {\n    var _this23;\n\n    var initOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      fields: 'photo_max,contacts',\n      version: '5.124'\n    };\n\n    _classCallCheck(this, VKLoginProvider);\n\n    _this23 = _super5.call(this);\n    _this23.clientId = clientId;\n    _this23.initOptions = initOptions;\n    _this23.VK_API_URL = '//vk.com/js/api/openapi.js';\n    _this23.VK_API_GET_USER = 'users.get';\n    return _this23;\n  }\n\n  _createClass(VKLoginProvider, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var _this24 = this;\n\n      return new Promise(function (resolve, reject) {\n        try {\n          _this24.loadScript(VKLoginProvider.PROVIDER_ID, _this24.VK_API_URL, function () {\n            VK.init({\n              apiId: _this24.clientId\n            });\n            resolve();\n          });\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n  }, {\n    key: \"getLoginStatus\",\n    value: function getLoginStatus() {\n      var _this25 = this;\n\n      return new Promise(function (resolve, reject) {\n        return _this25.getLoginStatusInternal(resolve, reject);\n      });\n    }\n  }, {\n    key: \"signIn\",\n    value: function signIn() {\n      var _this26 = this;\n\n      return new Promise(function (resolve, reject) {\n        return _this26.signInInternal(resolve, reject);\n      });\n    }\n  }, {\n    key: \"signOut\",\n    value: function signOut() {\n      return new Promise(function (resolve, reject) {\n        VK.Auth.logout(function (response) {\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: \"signInInternal\",\n    value: function signInInternal(resolve, reject) {\n      var _this27 = this;\n\n      VK.Auth.login(function (loginResponse) {\n        if (loginResponse.status === 'connected') {\n          _this27.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n        }\n      });\n    }\n  }, {\n    key: \"getUser\",\n    value: function getUser(userId, token, resolve) {\n      var _this28 = this;\n\n      VK.Api.call(this.VK_API_GET_USER, {\n        user_id: userId,\n        fields: this.initOptions.fields,\n        v: this.initOptions.version\n      }, function (userResponse) {\n        resolve(_this28.createUser(Object.assign({}, {\n          token: token\n        }, userResponse.response[0])));\n      });\n    }\n  }, {\n    key: \"getLoginStatusInternal\",\n    value: function getLoginStatusInternal(resolve, reject) {\n      var _this29 = this;\n\n      VK.Auth.getLoginStatus(function (loginResponse) {\n        if (loginResponse.status === 'connected') {\n          _this29.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n        }\n      });\n    }\n  }, {\n    key: \"createUser\",\n    value: function createUser(response) {\n      var user = new SocialUser();\n      user.id = response.id;\n      user.name = \"\".concat(response.first_name, \" \").concat(response.last_name);\n      user.photoUrl = response.photo_max;\n      user.authToken = response.token;\n      return user;\n    }\n  }]);\n\n  return VKLoginProvider;\n}(BaseLoginProvider);\n\nVKLoginProvider.PROVIDER_ID = 'VK';\n/**\n * Protocol modes supported by MSAL.\n */\n\nvar ProtocolMode;\n\n(function (ProtocolMode) {\n  ProtocolMode[\"AAD\"] = \"AAD\";\n  ProtocolMode[\"OIDC\"] = \"OIDC\";\n})(ProtocolMode || (ProtocolMode = {}));\n\nvar COMMON_AUTHORITY = 'https://login.microsoftonline.com/common/';\n/**\n * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser\n */\n\nvar MicrosoftLoginProvider = /*#__PURE__*/function (_BaseLoginProvider6) {\n  _inherits(MicrosoftLoginProvider, _BaseLoginProvider6);\n\n  var _super6 = _createSuper(MicrosoftLoginProvider);\n\n  function MicrosoftLoginProvider(clientId, initOptions) {\n    var _this30;\n\n    _classCallCheck(this, MicrosoftLoginProvider);\n\n    _this30 = _super6.call(this);\n    _this30.clientId = clientId;\n    _this30.initOptions = {\n      authority: COMMON_AUTHORITY,\n      scopes: ['openid', 'email', 'profile', 'User.Read'],\n      knownAuthorities: [],\n      protocolMode: ProtocolMode.AAD,\n      clientCapabilities: [],\n      cacheLocation: 'sessionStorage'\n    };\n    _this30.initOptions = Object.assign(Object.assign({}, _this30.initOptions), initOptions);\n    return _this30;\n  }\n\n  _createClass(MicrosoftLoginProvider, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var _this31 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this31.loadScript(MicrosoftLoginProvider.PROVIDER_ID, 'https://alcdn.msauth.net/browser/2.13.1/js/msal-browser.js', function () {\n          var _a;\n\n          try {\n            var config = {\n              auth: {\n                clientId: _this31.clientId,\n                redirectUri: (_a = _this31.initOptions.redirect_uri) !== null && _a !== void 0 ? _a : location.origin,\n                authority: _this31.initOptions.authority,\n                knownAuthorities: _this31.initOptions.knownAuthorities,\n                protocolMode: _this31.initOptions.protocolMode,\n                clientCapabilities: _this31.initOptions.clientCapabilities\n              },\n              cache: !_this31.initOptions.cacheLocation ? null : {\n                cacheLocation: _this31.initOptions.cacheLocation\n              }\n            };\n            _this31._instance = new msal.PublicClientApplication(config);\n            resolve();\n          } catch (e) {\n            reject(e);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"getSocialUser\",\n    value: function getSocialUser(loginResponse) {\n      return new Promise(function (resolve, reject) {\n        //After login, use Microsoft Graph API to get user info\n        var meRequest = new XMLHttpRequest();\n\n        meRequest.onreadystatechange = function () {\n          if (meRequest.readyState == 4) {\n            try {\n              if (meRequest.status == 200) {\n                var userInfo = JSON.parse(meRequest.responseText);\n                var user = new SocialUser();\n                user.provider = MicrosoftLoginProvider.PROVIDER_ID;\n                user.id = loginResponse.idToken;\n                user.authToken = loginResponse.accessToken;\n                user.name = loginResponse.idTokenClaims.name;\n                user.email = loginResponse.account.username;\n                user.idToken = loginResponse.idToken;\n                user.response = loginResponse;\n                user.firstName = userInfo.givenName;\n                user.lastName = userInfo.surname;\n                resolve(user);\n              } else {\n                reject(\"Error retrieving user info: \".concat(meRequest.status));\n              }\n            } catch (err) {\n              reject(err);\n            }\n          }\n        }; //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http\n\n\n        meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');\n        meRequest.setRequestHeader('Authorization', \"Bearer \".concat(loginResponse.accessToken));\n\n        try {\n          meRequest.send();\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n  }, {\n    key: \"getLoginStatus\",\n    value: function getLoginStatus() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var accounts, loginResponse;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                accounts = this._instance.getAllAccounts();\n\n                if (!((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                _context.next = 4;\n                return this._instance.ssoSilent({\n                  scopes: this.initOptions.scopes,\n                  loginHint: accounts[0].username\n                });\n\n              case 4:\n                loginResponse = _context.sent;\n                _context.next = 7;\n                return this.getSocialUser(loginResponse);\n\n              case 7:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 10:\n                throw \"No user is currently logged in with \".concat(MicrosoftLoginProvider.PROVIDER_ID);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"signIn\",\n    value: function signIn() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var loginResponse;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._instance.loginPopup({\n                  scopes: this.initOptions.scopes\n                });\n\n              case 2:\n                loginResponse = _context2.sent;\n                _context2.next = 5;\n                return this.getSocialUser(loginResponse);\n\n              case 5:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"signOut\",\n    value: function signOut(revoke) {\n      var _a, _b;\n\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                accounts = this._instance.getAllAccounts();\n\n                if (!((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0)) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                _context3.next = 4;\n                return this._instance.logoutPopup({\n                  account: accounts[0],\n                  postLogoutRedirectUri: (_b = (_a = this.initOptions.logout_redirect_uri) !== null && _a !== void 0 ? _a : this.initOptions.redirect_uri) !== null && _b !== void 0 ? _b : location.href\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }]);\n\n  return MicrosoftLoginProvider;\n}(BaseLoginProvider);\n\nMicrosoftLoginProvider.PROVIDER_ID = 'MICROSOFT';\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AmazonLoginProvider, BaseLoginProvider, DummyLoginProvider, FacebookLoginProvider, GoogleLoginProvider, MicrosoftLoginProvider, SocialAuthService, SocialLoginModule, SocialUser, VKLoginProvider };","map":{"version":3,"sources":["../../../projects/lib/src/entities/base-login-provider.ts","../../../projects/lib/src/entities/social-user.ts","../../../projects/lib/src/providers/google-login-provider.ts","../../../projects/lib/src/socialauth.service.ts","../../../projects/lib/src/sociallogin.module.ts","../../../projects/lib/src/providers/dummy-login-provider.ts","../../../projects/lib/src/providers/facebook-login-provider.ts","../../../projects/lib/src/providers/amazon-login-provider.ts","../../../projects/lib/src/providers/vk-login-provider.ts","../../../projects/lib/src/providers/microsoft-login-provider.ts","../../../projects/lib/src/angularx-social-login.ts"],"names":[],"mappings":"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","sourcesContent":["import { LoginProvider } from './login-provider';\nimport { SocialUser } from './social-user';\n\nexport abstract class BaseLoginProvider implements LoginProvider {\n  constructor() {}\n\n  abstract initialize(): Promise<void>;\n  abstract getLoginStatus(): Promise<SocialUser>;\n  abstract signIn(): Promise<SocialUser>;\n  abstract signOut(revoke?: boolean): Promise<void>;\n\n  protected loadScript(\n    id: string,\n    src: string,\n    onload: any,\n    parentElement = null\n  ): void {\n    // get document if platform is only browser\n    if (typeof document !== 'undefined' && !document.getElementById(id)) {\n      let signInJS = document.createElement('script');\n\n      signInJS.async = true;\n      signInJS.src = src;\n      signInJS.onload = onload;\n\n      if (!parentElement) {\n        parentElement = document.head;\n      }\n\n      parentElement.appendChild(signInJS);\n    }\n  }\n}\n","export class SocialUser {\n  provider: string;\n  id: string;\n  email: string;\n  name: string;\n  photoUrl: string;\n  firstName: string;\n  lastName: string;\n  authToken: string;\n\n  idToken: string; // Reference https://developers.google.com/identity/sign-in/web/backend-auth\n  authorizationCode: string; // Reference https://developers.google.com/identity/sign-in/web/reference#googleauthgrantofflineaccessoptions\n\n  response: any;\n}\n","import { BaseLoginProvider } from '../entities/base-login-provider';\nimport { SocialUser } from '../entities/social-user';\n\ndeclare let gapi: any;\n\nexport class GoogleLoginProvider extends BaseLoginProvider {\n  public static readonly PROVIDER_ID: string = 'GOOGLE';\n\n  protected auth2: any;\n\n  constructor(\n    private clientId: string,\n    private initOptions: any = { scope: 'email' }\n  ) {\n    super();\n  }\n\n  initialize(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(\n          GoogleLoginProvider.PROVIDER_ID,\n          'https://apis.google.com/js/platform.js',\n          () => {\n            gapi.load('auth2', () => {\n              this.auth2 = gapi.auth2.init({\n                ...this.initOptions,\n                client_id: this.clientId,\n              });\n\n              this.auth2\n                .then(() => {\n                  resolve();\n                })\n                .catch((err: any) => {\n                  reject(err);\n                });\n            });\n          }\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus(loginStatusOptions?: any): Promise<SocialUser> {\n    const options = {...this.initOptions, ...loginStatusOptions};\n\n    return new Promise((resolve, reject) => {\n      if (this.auth2.isSignedIn.get()) {\n        let user: SocialUser = new SocialUser();\n\n        const profile = this.auth2.currentUser.get().getBasicProfile();\n        const authResponse = this.auth2.currentUser.get().getAuthResponse(true);  // get complete authResponse object\n        user.id = profile.getId();\n        user.name = profile.getName();\n        user.email = profile.getEmail();\n        user.photoUrl = profile.getImageUrl();\n        user.firstName = profile.getGivenName();\n        user.lastName = profile.getFamilyName();\n        user.response = authResponse;\n\n        const resolveUser = authResponse => {\n          user.authToken = authResponse.access_token;\n          user.idToken = authResponse.id_token;\n\n          resolve(user);\n        };\n\n        if (options.refreshToken) {\n          this.auth2.currentUser.get().reloadAuthResponse().then(resolveUser);\n        } else {\n          const authResponse = this.auth2.currentUser.get().getAuthResponse(true);\n          resolveUser(authResponse);\n        }\n      } else {\n        reject(\n          `No user is currently logged in with ${GoogleLoginProvider.PROVIDER_ID}`\n        );\n      }\n    });\n  }\n\n  signIn(signInOptions?: any): Promise<SocialUser> {\n    const options = { ...this.initOptions, ...signInOptions };\n\n    return new Promise((resolve, reject) => {\n      const offlineAccess: boolean = options && options.offline_access;\n      let promise = !offlineAccess\n        ? this.auth2.signIn(signInOptions)\n        : this.auth2.grantOfflineAccess(signInOptions);\n\n      promise\n        .then(\n          (response: any) => {\n            let user: SocialUser = new SocialUser();\n\n            if (response && response.code) {\n              user.authorizationCode = response.code;\n            } else {\n              let profile = this.auth2.currentUser.get().getBasicProfile();\n              let authResponse = this.auth2.currentUser.get().getAuthResponse(true);\n\n              let token = authResponse.access_token;\n              let backendToken = authResponse.id_token;\n\n              user.id = profile.getId();\n              user.name = profile.getName();\n              user.email = profile.getEmail();\n              user.photoUrl = profile.getImageUrl();\n              user.firstName = profile.getGivenName();\n              user.lastName = profile.getFamilyName();\n              user.authToken = token;\n              user.idToken = backendToken;\n\n              user.response = authResponse;\n            }\n\n            resolve(user);\n          },\n          (closed: any) => {\n            reject(closed);\n          }\n        )\n        .catch((err: any) => {\n          reject(err);\n        });\n    });\n  }\n\n  signOut(revoke?: boolean): Promise<void> {\n    return new Promise((resolve, reject) => {\n      let signOutPromise: Promise<any>;\n\n      if (revoke) {\n        signOutPromise = this.auth2.disconnect();\n      } else {\n        signOutPromise = this.auth2.signOut();\n      }\n\n      signOutPromise\n        .then((err: any) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        })\n        .catch((err: any) => {\n          reject(err);\n        });\n    });\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { AsyncSubject, Observable, ReplaySubject } from 'rxjs';\nimport { LoginProvider } from './entities/login-provider';\nimport { SocialUser } from './entities/social-user';\nimport { GoogleLoginProvider } from './providers/google-login-provider';\n\n/**\n * An interface to define the shape of the service configuration options.\n */\nexport interface SocialAuthServiceConfig {\n  autoLogin?: boolean;\n  providers: { id: string; provider: LoginProvider }[];\n  onError?: (error: any) => any;\n}\n\n/**\n * The service encapsulating the social login functionality. Exposes methods like\n * `signIn`, `signOut`. Also, exposes an `authState` `Observable` that one can\n * subscribe to get the current logged in user information.\n *\n * @dynamic\n */\n@Injectable()\nexport class SocialAuthService {\n  private static readonly ERR_LOGIN_PROVIDER_NOT_FOUND =\n    'Login provider not found';\n  private static readonly ERR_NOT_LOGGED_IN = 'Not logged in';\n  private static readonly ERR_NOT_INITIALIZED =\n    'Login providers not ready yet. Are there errors on your console?';\n  private static readonly ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN =\n    'Chosen login provider is not supported for refreshing a token';\n\n  private providers: Map<string, LoginProvider> = new Map();\n  private autoLogin = false;\n\n  private _user: SocialUser = null;\n  private _authState: ReplaySubject<SocialUser> = new ReplaySubject(1);\n\n  /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */\n  private initialized = false;\n  private _initState: AsyncSubject<boolean> = new AsyncSubject();\n\n  /** An `Observable` that one can subscribe to get the current logged in user information */\n  get authState(): Observable<SocialUser> {\n    return this._authState.asObservable();\n  }\n\n  /** An `Observable` to communicate the readiness of the service and associated login providers */\n  get initState(): Observable<boolean> {\n    return this._initState.asObservable();\n  }\n\n  /**\n   * @param config A `SocialAuthServiceConfig` object or a `Promise` that resolves to a `SocialAuthServiceConfig` object\n   */\n  constructor(\n    @Inject('SocialAuthServiceConfig')\n    config: SocialAuthServiceConfig | Promise<SocialAuthServiceConfig>\n  ) {\n    if (config instanceof Promise) {\n      config.then((config) => {\n        this.initialize(config);\n      });\n    } else {\n      this.initialize(config);\n    }\n  }\n\n  private initialize(config: SocialAuthServiceConfig) {\n    this.autoLogin = config.autoLogin !== undefined ? config.autoLogin : false;\n    const { onError = console.error } = config;\n\n    config.providers.forEach((item) => {\n      this.providers.set(item.id, item.provider);\n    });\n\n    Promise.all(\n      Array.from(this.providers.values()).map((provider) =>\n        provider.initialize()\n      )\n    )\n      .then(() => {\n        if (this.autoLogin) {\n          const loginStatusPromises = [];\n          let loggedIn = false;\n\n          this.providers.forEach((provider: LoginProvider, key: string) => {\n            let promise = provider.getLoginStatus();\n            loginStatusPromises.push(promise);\n            promise\n              .then((user: SocialUser) => {\n                user.provider = key;\n\n                this._user = user;\n                this._authState.next(user);\n                loggedIn = true;\n              })\n              .catch(console.debug);\n          });\n          Promise.all(loginStatusPromises).catch(() => {\n            if (!loggedIn) {\n              this._user = null;\n              this._authState.next(null);\n            }\n          });\n        }\n      })\n      .catch((error) => {\n        onError(error);\n      })\n      .finally(() => {\n        this.initialized = true;\n        this._initState.next(this.initialized);\n        this._initState.complete();\n      });\n  }\n\n  refreshAuthToken(providerId: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else if (providerId !== GoogleLoginProvider.PROVIDER_ID) {\n        reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n      } else {\n        const providerObject = this.providers.get(providerId);\n        if (providerObject) {\n          providerObject\n            .getLoginStatus({ refreshToken: true })\n            .then((user: SocialUser) => {\n              user.provider = providerId;\n              this._user = user;\n              this._authState.next(user);\n              resolve();\n            })\n            .catch((err) => {\n              reject(err);\n            });\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n\n  /**\n   * A method used to sign in a user with a specific `LoginProvider`.\n   *\n   * @param providerId Id with which the `LoginProvider` has been registered with the service\n   * @param signInOptions Optional `LoginProvider` specific arguments\n   * @returns A `Promise` that resolves to the authenticated user information\n   */\n  signIn(providerId: string, signInOptions?: any): Promise<SocialUser> {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else {\n        let providerObject = this.providers.get(providerId);\n        if (providerObject) {\n          providerObject\n            .signIn(signInOptions)\n            .then((user: SocialUser) => {\n              user.provider = providerId;\n              resolve(user);\n\n              this._user = user;\n              this._authState.next(user);\n            })\n            .catch((err) => {\n              reject(err);\n            });\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n\n  /**\n   * A method used to sign out the currently loggen in user.\n   *\n   * @param revoke Optional parameter to specify whether a hard sign out is to be performed\n   * @returns A `Promise` that resolves if the operation is successful, rejects otherwise\n   */\n  signOut(revoke: boolean = false): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else if (!this._user) {\n        reject(SocialAuthService.ERR_NOT_LOGGED_IN);\n      } else {\n        let providerId = this._user.provider;\n        let providerObject = this.providers.get(providerId);\n        if (providerObject) {\n          providerObject\n            .signOut(revoke)\n            .then(() => {\n              resolve();\n\n              this._user = null;\n              this._authState.next(null);\n            })\n            .catch((err) => {\n              reject(err);\n            });\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n}\n","import {\n  NgModule,\n  Optional,\n  SkipSelf,\n  ModuleWithProviders\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SocialAuthService, SocialAuthServiceConfig } from './socialauth.service';\n\n/**\n * The main module of angularx-social-login library.\n */\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  providers: [\n    SocialAuthService\n  ]\n})\nexport class SocialLoginModule {\n  public static initialize(config: SocialAuthServiceConfig): ModuleWithProviders<SocialLoginModule> {\n    return {\n      ngModule: SocialLoginModule,\n      providers: [\n        SocialAuthService,\n        {\n          provide: 'SocialAuthServiceConfig',\n          useValue: config\n        }\n      ]\n    };\n  }\n\n  constructor(@Optional() @SkipSelf() parentModule: SocialLoginModule) {\n    if (parentModule) {\n      throw new Error(\n        'SocialLoginModule is already loaded. Import it in the AppModule only');\n    }\n  }\n}\n","import {BaseLoginProvider} from '../entities/base-login-provider';\nimport {SocialUser} from '../entities/social-user';\n\n\n// Simulates login / logout without actually requiring an Internet connection.\n//\n// Useful for certain development situations.\n//\n// For example, if you want to simulate the greatest football referee England has ever produced:\n//\n//  const dummyUser: SocialUser = {\n//     id: '0123456789',\n//     name: 'Howard Webb',\n//     email: 'howard@webb.com',\n//     firstName: 'Howard',\n//     lastName: 'Webb',\n//     authToken: 'dummyAuthToken',\n//     photoUrl: 'https://en.wikipedia.org/wiki/Howard_Webb#/media/File:Howard_Webb_march11.jpg',\n//     provider: 'DUMMY',\n//     idToken: 'dummyIdToken',\n//     authorizationCode: 'dummyAuthCode'\n// };\n//\n//  let config = new AuthServiceConfig([\n//  { ... },\n//  {\n//       id: DummyLoginProvider.PROVIDER_ID,\n//       provider: new DummyLoginProvider(dummyUser)  // Pass your user into the constructor\n//   },\n//  { ... }\n//  ]);\n\n\nexport class DummyLoginProvider extends BaseLoginProvider {\n  public static readonly PROVIDER_ID: string = 'DUMMY';\n\n  static readonly DEFAULT_USER = {\n    id: '1234567890',\n    name: 'Mickey Mouse',\n    email: 'mickey@mouse.com',\n    firstName: 'Mickey',\n    lastName: 'Mouse',\n    authToken: 'dummyAuthToken',\n    photoUrl: 'https://en.wikipedia.org/wiki/File:Mickey_Mouse.png',\n    provider: 'DUMMY',\n    idToken: 'dummyIdToken',\n    authorizationCode: 'dummyAuthCode',\n    response: {}\n  };\n\n  private dummy: SocialUser;\n\n  private loggedIn: boolean;\n\n  constructor(dummy?: SocialUser) {\n    super();\n    if (dummy) {\n      this.dummy = dummy;\n    } else {\n      this.dummy = DummyLoginProvider.DEFAULT_USER;\n    }\n\n    // Start not logged in\n    this.loggedIn = false;\n  }\n\n  getLoginStatus(): Promise<SocialUser> {\n    return new Promise((resolve, reject) => {\n      if (this.loggedIn) {\n        resolve(this.dummy);\n      } else {\n        reject('No user is currently logged in.');\n      }\n    });\n  }\n\n  initialize(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      resolve();\n    });\n  }\n\n  signIn(): Promise<SocialUser> {\n    return new Promise((resolve, reject) => {\n      this.loggedIn = true;\n      resolve(this.dummy);\n    });\n  }\n\n  signOut(revoke?: boolean): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.loggedIn = false;\n      resolve();\n    });\n  }\n}\n","import { BaseLoginProvider } from '../entities/base-login-provider';\nimport { SocialUser } from '../entities/social-user';\n\ndeclare let FB: any;\n\nexport class FacebookLoginProvider extends BaseLoginProvider {\n  public static readonly PROVIDER_ID: string = 'FACEBOOK';\n\n  constructor(\n    private clientId: string,\n    private initOptions: any = {\n      scope: 'email,public_profile',\n      locale: 'en_US',\n      fields: 'name,email,picture,first_name,last_name',\n      version: 'v4.0',\n    }\n  ) {\n    super();\n  }\n\n  initialize(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(\n          FacebookLoginProvider.PROVIDER_ID,\n          `//connect.facebook.net/${this.initOptions.locale}/sdk.js`,\n          () => {\n            FB.init({\n              appId: this.clientId,\n              autoLogAppEvents: true,\n              cookie: true,\n              xfbml: true,\n              version: this.initOptions.version,\n            });\n\n            resolve();\n          }\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus(): Promise<SocialUser> {\n    return new Promise((resolve, reject) => {\n      FB.getLoginStatus((response: any) => {\n        if (response.status === 'connected') {\n          let authResponse = response.authResponse;\n          FB.api(`/me?fields=${this.initOptions.fields}`, (fbUser: any) => {\n            let user: SocialUser = new SocialUser();\n\n            user.id = fbUser.id;\n            user.name = fbUser.name;\n            user.email = fbUser.email;\n            user.photoUrl =\n              'https://graph.facebook.com/' +\n              fbUser.id +\n              '/picture?type=normal';\n            user.firstName = fbUser.first_name;\n            user.lastName = fbUser.last_name;\n            user.authToken = authResponse.accessToken;\n\n            user.response = fbUser;\n\n            resolve(user);\n          });\n        } else {\n          reject(`No user is currently logged in with ${FacebookLoginProvider.PROVIDER_ID}`);\n        }\n      });\n    });\n  }\n\n  signIn(signInOptions?: any): Promise<SocialUser> {\n    const options = { ...this.initOptions, ...signInOptions };\n    return new Promise((resolve, reject) => {\n      FB.login((response: any) => {\n        if (response.authResponse) {\n          let authResponse = response.authResponse;\n          FB.api(`/me?fields=${options.fields}`, (fbUser: any) => {\n            let user: SocialUser = new SocialUser();\n\n            user.id = fbUser.id;\n            user.name = fbUser.name;\n            user.email = fbUser.email;\n            user.photoUrl =\n              'https://graph.facebook.com/' +\n              fbUser.id +\n              '/picture?type=normal';\n            user.firstName = fbUser.first_name;\n            user.lastName = fbUser.last_name;\n            user.authToken = authResponse.accessToken;\n\n            user.response = fbUser;\n\n            resolve(user);\n          });\n        } else {\n          reject('User cancelled login or did not fully authorize.');\n        }\n      }, options);\n    });\n  }\n\n  signOut(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      FB.logout((response: any) => {\n        resolve();\n      });\n    });\n  }\n}\n","import { BaseLoginProvider } from '../entities/base-login-provider';\nimport { SocialUser } from '../entities/social-user';\n\ndeclare let amazon: any, window: any;\n\nexport class AmazonLoginProvider extends BaseLoginProvider {\n  public static readonly PROVIDER_ID: string = 'AMAZON';\n\n  constructor(\n    private clientId: string,\n    private initOptions: any = {\n      scope: 'profile',\n      scope_data: {\n        profile: { essential: false },\n      },\n      redirect_uri: location.origin,\n    }\n  ) {\n    super();\n  }\n\n  initialize(): Promise<void> {\n    let amazonRoot = null;\n    if (document) {\n      amazonRoot = document.createElement('div');\n      amazonRoot.id = 'amazon-root';\n      document.body.appendChild(amazonRoot);\n    }\n\n    window.onAmazonLoginReady = () => {\n      amazon.Login.setClientId(this.clientId);\n    };\n\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(\n          'amazon-login-sdk',\n          'https://assets.loginwithamazon.com/sdk/na/login1.js',\n          () => {\n            resolve();\n          },\n          amazonRoot\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus(): Promise<SocialUser> {\n    return new Promise((resolve, reject) => {\n      let token = this.retrieveToken();\n\n      if (token) {\n        amazon.Login.retrieveProfile(token, (response) => {\n          if (response.success) {\n            let user: SocialUser = new SocialUser();\n\n            user.id = response.profile.CustomerId;\n            user.name = response.profile.Name;\n            user.email = response.profile.PrimaryEmail;\n            user.response = response.profile;\n\n            resolve(user);\n          } else {\n            reject(response.error);\n          }\n        });\n      } else {\n        reject(`No user is currently logged in with ${AmazonLoginProvider.PROVIDER_ID}`);\n      }\n    });\n  }\n\n  signIn(signInOptions?: any): Promise<SocialUser> {\n    const options = { ...this.initOptions, ...signInOptions };\n    return new Promise((resolve, reject) => {\n      amazon.Login.authorize(options, (authResponse) => {\n        if (authResponse.error) {\n          reject(authResponse.error);\n        } else {\n          amazon.Login.retrieveProfile(\n            authResponse.access_token,\n            (response) => {\n              let user: SocialUser = new SocialUser();\n\n              user.id = response.profile.CustomerId;\n              user.name = response.profile.Name;\n              user.email = response.profile.PrimaryEmail;\n              user.authToken = authResponse.access_token;\n              user.response = response.profile;\n\n              this.persistToken(authResponse.access_token);\n\n              resolve(user);\n            }\n          );\n        }\n      });\n    });\n  }\n\n  signOut(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        amazon.Login.logout();\n\n        this.clearToken();\n        resolve();\n      } catch (err) {\n        reject(err.message);\n      }\n    });\n  }\n\n  private persistToken(token: string): void {\n    localStorage.setItem(`${AmazonLoginProvider.PROVIDER_ID}_token`, token);\n  }\n\n  private retrieveToken(): string {\n    return localStorage.getItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n  }\n\n  private clearToken(): void {\n    localStorage.removeItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n  }\n}\n","import { BaseLoginProvider } from '../entities/base-login-provider';\nimport { SocialUser } from '../entities/social-user';\n\ndeclare let VK: any;\n\nexport class VKLoginProvider extends BaseLoginProvider {\n  constructor(\n    private clientId: string,\n    private initOptions: any = {\n      fields: 'photo_max,contacts',\n      version: '5.124',\n    }\n  ) {\n    super();\n  }\n\n  public static readonly PROVIDER_ID: string = 'VK';\n\n  private readonly VK_API_URL = '//vk.com/js/api/openapi.js';\n  private readonly VK_API_GET_USER = 'users.get';\n\n  initialize(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(\n          VKLoginProvider.PROVIDER_ID,\n          this.VK_API_URL,\n          () => {\n            VK.init({\n              apiId: this.clientId,\n            });\n\n            resolve();\n          }\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus(): Promise<SocialUser> {\n    return new Promise<SocialUser>((resolve: any, reject: any) =>\n      this.getLoginStatusInternal(resolve, reject)\n    );\n  }\n\n  signIn(): Promise<SocialUser> {\n    return new Promise<SocialUser>((resolve: any, reject: any) =>\n      this.signInInternal(resolve, reject)\n    );\n  }\n\n  signOut(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      VK.Auth.logout((response: any) => {\n        resolve();\n      });\n    });\n  }\n\n  private signInInternal(resolve: any, reject: any) {\n    VK.Auth.login((loginResponse: any) => {\n      if (loginResponse.status === 'connected') {\n        this.getUser(\n          loginResponse.session.mid,\n          loginResponse.session.sid,\n          resolve\n        );\n      }\n    });\n  }\n\n  private getUser(userId: any, token: any, resolve: any) {\n    VK.Api.call(\n      this.VK_API_GET_USER,\n      {\n        user_id: userId,\n        fields: this.initOptions.fields,\n        v: this.initOptions.version,\n      },\n      (userResponse: any) => {\n        resolve(\n          this.createUser(\n            Object.assign({}, { token }, userResponse.response[0])\n          )\n        );\n      }\n    );\n  }\n\n  private getLoginStatusInternal(resolve: any, reject: any) {\n    VK.Auth.getLoginStatus((loginResponse: any) => {\n      if (loginResponse.status === 'connected') {\n        this.getUser(\n          loginResponse.session.mid,\n          loginResponse.session.sid,\n          resolve\n        );\n      }\n    });\n  }\n\n  private createUser(response: any): SocialUser {\n    const user: SocialUser = new SocialUser();\n    user.id = response.id;\n    user.name = `${response.first_name} ${response.last_name}`;\n    user.photoUrl = response.photo_max;\n    user.authToken = response.token;\n    return user;\n  }\n}\n","import { BaseLoginProvider } from '../entities/base-login-provider';\nimport { SocialUser } from '../entities/social-user';\n\n/**\n * Protocol modes supported by MSAL.\n */\nexport enum ProtocolMode {\n  AAD = 'AAD',\n  OIDC = 'OIDC'\n}\n\n/**\n * Initialization Options for Microsoft Provider: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/initialization.md\n * Details (not all options are supported): https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\n */\nexport type MicrosoftOptions = {\n  redirect_uri?: string,\n  logout_redirect_uri?: string,\n  authority?: string,\n  knownAuthorities?: string[],\n  protocolMode?: ProtocolMode,\n  clientCapabilities?: string[],\n  cacheLocation?: string,\n  scopes?: string[]\n};\n\n// Collection of internal MSAL interfaces from: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser/src\n\ninterface MSALAccount {\n  environment: string;\n  homeAccountId: string;\n  tenantId: string;\n  username: string;\n}\n\ninterface MSGraphUserInfo {\n  businessPhones: string[];\n  displayName: string;\n  givenName: string;\n  id: string;\n  jobTitle: string;\n  mail: string;\n  mobilePhone: string;\n  officeLocation: string;\n  preferredLanguage: string;\n  surname: string;\n  userPrincipalName: string;\n}\n\ninterface MSALLoginRequest {\n  scopes?: string[];\n  sid?: string;\n  loginHint?: string;\n  domainHint?: string;\n}\n\ninterface MSALLoginResponse {\n  accessToken: string;\n  account: MSALAccount;\n  expiresOn: Date;\n  extExpiresOn: Date;\n  familyId: string;\n  fromCache: boolean;\n  idToken: string;\n  idTokenClaims: any;\n  scopes: string[];\n  state: string;\n  tenantId: string;\n  uniqueId: string;\n}\n\ninterface MSALLogoutRequest {\n  account?: MSALAccount;\n  postLogoutRedirectUri?: string;\n  authority?: string;\n  correlationId?: string;\n}\n\ninterface MSALClientApplication {\n  getAllAccounts(): MSALAccount[];\n  logoutPopup(logoutRequest?: MSALLogoutRequest): Promise<void>;\n  loginPopup(loginRequest: MSALLoginRequest): Promise<MSALLoginResponse>;\n  ssoSilent(loginRequest: MSALLoginRequest): Promise<MSALLoginResponse>;\n  acquireTokenSilent(loginRequest: MSALLoginRequest): Promise<MSALLoginResponse>;\n  getAccountByHomeId(homeAccountId: string): MSALAccount;\n}\n\ndeclare let msal: any;\n\nconst COMMON_AUTHORITY: string = 'https://login.microsoftonline.com/common/';\n\n/**\n * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser\n */\nexport class MicrosoftLoginProvider extends BaseLoginProvider {\n  private _instance: MSALClientApplication;\n  public static readonly PROVIDER_ID: string = 'MICROSOFT';\n\n  private initOptions: MicrosoftOptions = {\n    authority: COMMON_AUTHORITY,\n    scopes: ['openid', 'email', 'profile', 'User.Read'],\n    knownAuthorities: [],\n    protocolMode: ProtocolMode.AAD,\n    clientCapabilities: [],\n    cacheLocation: 'sessionStorage'\n  };\n\n  constructor(\n    private clientId: string,\n    initOptions?: MicrosoftOptions\n  ) {\n    super();\n\n    this.initOptions = {\n      ...this.initOptions,\n      ...initOptions\n    };\n  }\n\n  initialize(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.loadScript(\n        MicrosoftLoginProvider.PROVIDER_ID,\n        'https://alcdn.msauth.net/browser/2.13.1/js/msal-browser.js',\n        () => {\n          try {\n            const config = {\n              auth: {\n                clientId: this.clientId,\n                redirectUri: this.initOptions.redirect_uri ?? location.origin,\n                authority: this.initOptions.authority,\n                knownAuthorities: this.initOptions.knownAuthorities,\n                protocolMode: this.initOptions.protocolMode,\n                clientCapabilities: this.initOptions.clientCapabilities\n              },\n              cache: !this.initOptions.cacheLocation ? null : {\n                cacheLocation: this.initOptions.cacheLocation\n              }\n            };\n\n            this._instance = new msal.PublicClientApplication(config);\n            resolve();\n          } catch (e) {\n            reject(e);\n          }\n        }\n      );\n    });\n  }\n\n  private getSocialUser(loginResponse): Promise<SocialUser> {\n    return new Promise<SocialUser>((resolve, reject) => {\n      //After login, use Microsoft Graph API to get user info\n      let meRequest = new XMLHttpRequest();\n      meRequest.onreadystatechange = () => {\n        if (meRequest.readyState == 4) {\n          try {\n            if (meRequest.status == 200) {\n              let userInfo = <MSGraphUserInfo>JSON.parse(meRequest.responseText);\n\n              let user: SocialUser = new SocialUser();\n              user.provider = MicrosoftLoginProvider.PROVIDER_ID;\n              user.id = loginResponse.idToken;\n              user.authToken = loginResponse.accessToken;\n              user.name = loginResponse.idTokenClaims.name;\n              user.email = loginResponse.account.username;\n              user.idToken = loginResponse.idToken;\n              user.response = loginResponse;\n              user.firstName = userInfo.givenName;\n              user.lastName = userInfo.surname;\n\n              resolve(user);\n            } else {\n              reject(`Error retrieving user info: ${meRequest.status}`);\n            }\n          } catch (err) {\n            reject(err);\n          }\n        }\n      };\n\n      //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http\n      meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');\n      meRequest.setRequestHeader('Authorization', `Bearer ${loginResponse.accessToken}`);\n      try {\n        meRequest.send();\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  async getLoginStatus(): Promise<SocialUser> {\n    const accounts = this._instance.getAllAccounts();\n    if (accounts?.length > 0) {\n      const loginResponse = await this._instance.ssoSilent({\n        scopes: this.initOptions.scopes,\n        loginHint: accounts[0].username\n      });\n      return await this.getSocialUser(loginResponse);\n    } else {\n      throw `No user is currently logged in with ${MicrosoftLoginProvider.PROVIDER_ID}`;\n    }\n  }\n\n  async signIn(): Promise<SocialUser> {\n    const loginResponse = await this._instance.loginPopup({\n      scopes: this.initOptions.scopes\n    });\n    return await this.getSocialUser(loginResponse);\n  }\n\n  async signOut(revoke?: boolean): Promise<any> {\n    const accounts = this._instance.getAllAccounts();\n    if (accounts?.length > 0) {\n      await this._instance.logoutPopup({\n        account: accounts[0],\n        postLogoutRedirectUri: this.initOptions.logout_redirect_uri ?? this.initOptions.redirect_uri ?? location.href\n      })\n    }\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}